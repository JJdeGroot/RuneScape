program JJsBarbOutpost;
{$DEFINE SMART}
{$i srl/srl.simba}
{$i SRL/SRL/misc/debug.simba}
{$i SRL/SRL/misc/paintsmart.simba}

var
  Debug: Boolean;
  Attempts: Integer;

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  with Players[0] do
    begin
      Name := '';
      Pass := '';
      Pin := '';
      Active := True;
    end;
end;

procedure SetupLogin;
begin
  ClearDebug;
  Smart_Server := 10;
  Smart_Members := False;
  Smart_Signed := True;
  Smart_SuperDetail := False;
  SetupSRL;
  DeclarePlayers;
  LoginPlayer;
  Wait(1000 + Random(3000));
  ClickNorth(0);
end;

// Swinging the rope \\
function RopeFail: Boolean;
var
  X, Y, i: Integer;
  LadderCl: TPointArray;
  LadderClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.12, 1.01);
  if FindColorsSpiralTolerance(X, Y, LadderCl, 3030082, MSCX-100, MSCY-50, MSCX, MSCY+50, 11) then
    begin
      SplitTPAExWrap(LadderCl, 1, 1, LadderClSplit);
      SortATPASize(LadderClSplit, True);
      for i:=0 to High(LadderClSplit) do
        begin
          MiddleTPAEx(LadderClSplit[i], X, Y);
          MMouse(X, Y, RandomRange(-2, 2), RandomRange(-2, 2));
          if WaitUpTextMulti(['limb', 'up', 'adder', 'Climb', 'Ladder'], 500) then
            begin
              ClickMouse2(1);
              Wait(4000 + Random(1000));
              Result:=True;
              Break;
            end;
        end;
    end;
end;

function RopeCheck: String;
var
  i, t: Integer;
  PossibleText: Array of String;

begin
  MarkTime(t);
  repeat
    Wait(50 + Random(50));
  until (FindChatBoxText('slip', 8, clBlack)) or (FindChatBoxText('skil', 8, clBlack)) or (FindChatBoxText('used', 8, clBlack)) or (TimeFromMark(t)>2000);
  if TimeFromMark(t) < 2000 then
    begin
      PossibleText := ['fail', 'used', 'swing'];
      for i:=0 to 2 do
        begin
          if FindChatBoxText(PossibleText[i], 8, clBlack) then
            Result := PossibleText[i];
        end;
    end else
      Result:='time';
end;

function RopeSwing: Boolean;
var
  X, Y, P, i: Integer;
  RopeLength: Array[0..1] of Integer;
  SwingCl: TPointArray;
  SwingClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.12, 0.57);
  if FindColorsSpiralTolerance(X, Y, SwingCl, 663074, MSX1, MSY1, MSX2, MSY2, 5) then
    begin
      SplitTPAExWrap(SwingCl, 1, 1, SwingClSplit);
      SortATPASize(SwingClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(SwingClSplit);
          SMART_DrawDotsEx(False, SwingCl, clYellow); // Both swings
          SMART_DrawBoxes(False, [GetTPABounds(SwingCl)], clAqua); // TPA Box
          SMART_DrawBoxes(False, [GetTPABounds(SwingClSplit[0]), GetTPABounds(SwingClSplit[1])], clGreen); // ATPA boxes
          SMART_DrawCircle(False, MiddleTPA(SwingClSplit[0]), 2, True, clRed); // Left Swing middle
          SMART_DrawCircle(False, MiddleTPA(SwingClSplit[1]), 2, True, clRed); // Right Swing middle
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(SwingClSplit[0]).X1, 3 + GetTPABounds(SwingClSplit[0]).Y1, GetTPABounds(SwingClSplit[0]).X2, GetTPABounds(SwingClSplit[0]).Y1 + (GetTPABounds(SwingClSplit[0]).Y2 - GetTPABounds(SwingClSplit[0]).Y1)/10)], clRed); // Box on top of swing #1
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(SwingClSplit[1]).X1, 3 + GetTPABounds(SwingClSplit[1]).Y1, GetTPABounds(SwingClSplit[1]).X2, GetTPABounds(SwingClSplit[1]).Y1 + (GetTPABounds(SwingClSplit[1]).Y2 - GetTPABounds(SwingClSplit[1]).Y1)/10)], clRed); // Box on top of swing #2
          WriteLn('SwingClSplit[0] length: '+IntToStr(High(SwingClSplit[0]))+'');
          WriteLn('SwingClSplit[1] length: '+IntToStr(High(SwingClSplit[1]))+'');
          WriteLn('Rope #1 length: '+IntToStr((GetTPABounds(SwingClSplit[0]).Y2 - GetTPABounds(SwingClSplit[0]).Y1))+'');
          WriteLn('Rope #2 length: '+IntToStr((GetTPABounds(SwingClSplit[1]).Y2 - GetTPABounds(SwingClSplit[1]).Y1))+'');
       end;

      RopeLength[0] := (GetTPABounds(SwingClSplit[0]).Y2 - GetTPABounds(SwingClSplit[0]).Y1);
      RopeLength[1] := (GetTPABounds(SwingClSplit[1]).Y2 - GetTPABounds(SwingClSplit[1]).Y1);

      if (RopeLength[0] < 100) and (RopeLength[1] < 100) then
        begin
          case Random(4) of
            0: begin
                 P := RandomRange(Low(SwingClSplit[0]), High(SwingClSplit[0]));
                 MMouse(SwingClSplit[0][P].X, SwingClSplit[0][P].Y, 0, 0); // Random spot on rope 1
               end;
            1: begin
                 P := RandomRange(Low(SwingClSplit[1]), High(SwingClSplit[1]));
                 MMouse(SwingClSplit[1][P].X, SwingClSplit[1][P].Y, 0, 0); // Random spot on rope 2
               end;
            2: Mousebox(GetTPABounds(SwingClSplit[0]).X1, 3 + GetTPABounds(SwingClSplit[0]).Y1, GetTPABounds(SwingClSplit[0]).X2, GetTPABounds(SwingClSplit[0]).Y1 + (GetTPABounds(SwingClSplit[0]).Y2 - GetTPABounds(SwingClSplit[0]).Y1)/10, 2); // Random spot in the box of rope 1
            3: Mousebox(GetTPABounds(SwingClSplit[1]).X1, 3 + GetTPABounds(SwingClSplit[1]).Y1, GetTPABounds(SwingClSplit[1]).X2, GetTPABounds(SwingClSplit[1]).Y1 + (GetTPABounds(SwingClSplit[1]).Y2 - GetTPABounds(SwingClSplit[1]).Y1)/10, 2); // Random spot in the box of rope 2
          end;
          if WaitUpTextMulti(['wing', 'Rope'], 500) then
            begin
              case Random(7) of
                0..4: ClickMouse2(1);
                5..6: begin
                        ClickMouse2(0);
                        WaitOptionMulti(['wing', 'Rope'], 500);
                      end;
              end;
           end;
        end else
        begin
          if (RopeLength[0] > 100) and (RopeLength[1] > 100) then
            begin
              Wait(2000 + Random(2000));
              RopeSwing;
            end else
            begin
              for i:=0 to 1 do
                begin
                  if (RopeLength[i] < 100) then
                    begin
                      case Random(2) of
                        0: begin
                             P := RandomRange(Low(SwingClSplit[i]), High(SwingClSplit[i]));
                             MMouse(SwingClSplit[i][P].X, SwingClSplit[i][P].Y, 0, 0); // Random spot on rope 1
                           end;
                        1: Mousebox(GetTPABounds(SwingClSplit[i]).X1, 3 + GetTPABounds(SwingClSplit[i]).Y1, GetTPABounds(SwingClSplit[i]).X2, GetTPABounds(SwingClSplit[i]).Y1 + (GetTPABounds(SwingClSplit[i]).Y2 - GetTPABounds(SwingClSplit[i]).Y1)/10, 2); // Random spot in the box of rope 1
                      end;
                      if WaitUpTextMulti(['wing', 'Rope'], 500) then
                        begin
                          case Random(7) of
                            0..4: ClickMouse2(1);
                            5..6: begin
                                    ClickMouse2(0);
                                    WaitOptionMulti(['wing', 'Rope'], 500);
                                  end;
                          end;
                       end;
                    end;
                end;
            end;
        end;
      Wait(3000 + Random(1500));
        case RopeCheck of
          'swing': begin
                     Wait(1000 + Random(1000));
                     Result:=True;
                   end;
          'time':  RopeSwing;
          'fail':  begin
                     if RopeFail then
                       RopeSwing;
                   end;
          'used':  RopeSwing;
        end;
    end;
end;

// Walking over the log \\
function LogCheck: String;
var
  i, t: Integer;
  PossibleText: Array of String;

begin
  MarkTime(t);
  repeat
    Wait(50 + Random(50));
  until (FindChatBoxText('lose', 8, clBlack)) or (FindChatBoxText('bites', 8, clBlack)) or (FindChatBoxText('safe', 8, clBlack)) or (TimeFromMark(t)>3000);
  if TimeFromMark(t) < 3000 then
    begin
      PossibleText := ['lose', 'bites', 'safe'];
      for i:=0 to 2 do
        begin
          if FindChatBoxText(PossibleText[i], 8, clBlack) then
            Result := PossibleText[i];
        end;
    end else
      Result:='time';
end;

function LogWalk: Boolean;
var
  X, Y: Integer;
  LogCl: TPointArray;
  LogClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.15, 0.76);
  if FindColorsSpiralTolerance(X, Y, LogCl, 1777965, MSX1, MSY1, MSX2, MSY2, 11) then
    begin
      SplitTPAExWrap(LogCl, 1, 1, LogClSplit);
      SortATPASize(LogClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(LogClSplit);
          SMART_DrawDotsEx(False, LogCl, clYellow); // Log
          SMART_DrawBoxes(False, [GetTPABounds(LogCl)], clAqua); // TPA Box
          SMART_DrawCircle(False, MiddleTPA(LogClSplit[0]), 2, True, clRed); // Middle log
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(LogClSplit[0]).X1, GetTPABounds(LogClSplit[0]).Y1 + 8, GetTPABounds(LogClSplit[0]).X2, GetTPABounds(LogClSplit[0]).Y2 - 4)], clRed); // Box of the log
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(LogClSplit[0]).X2 - 35, GetTPABounds(LogClSplit[0]).Y1 + 8, GetTPABounds(LogClSplit[0]).X2, GetTPABounds(LogClSplit[0]).Y2 - 4)], clPurple); // Box of the clickable part
        end;

      Mousebox(GetTPABounds(LogClSplit[0]).X2 - 35, GetTPABounds(LogClSplit[0]).Y1 + 8, GetTPABounds(LogClSplit[0]).X2, GetTPABounds(LogClSplit[0]).Y2 - 4, 2);
      if WaitUpTextMulti(['alk', 'across'], 500) then
        begin
          case Random(7) of
            0..4: ClickMouse2(1);
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['alk', 'across'], 500);
                  end;
          end;
       end;
       Wait(5000 + Random(2000));
        case LogCheck of
          'safe': begin
                    Wait(3000 + Random(1000));
                    Result:=True;
                  end;
          'time': LogWalk;
          'lose': begin
                    Wait(3000 + Random(1000));
                    LogWalk;
                    Wait(2000 + Random(1000));
                  end;
          'bites': begin
                    Wait(3000 + Random(1000));
                    LogWalk;
                    Wait(2000 + Random(1000));
                  end;
        end;
   end;
end;

// Climbing the net \\
function ClimbNet: Boolean;
var
  X, Y: Integer;
  NetCl: TPointArray;
  NetClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.10, 0.58);
  if FindColorsSpiralTolerance(X, Y, NetCl, 5204079, MSX1, MSY1, MSX2, MSY2, 7) then
    begin
      SplitTPAExWrap(NetCl, 3, 3, NetClSplit);
      SortATPASize(NetClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(NetClSplit);
          SMART_DrawDotsEx(False, NetCl, clYellow); // Net
          SMART_DrawBoxes(False, [GetTPABounds(NetCl)], clAqua); // TPA Box
          SMART_DrawCircle(False, MiddleTPA(NetClSplit[0]), 2, True, clRed); // Middle net
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(NetClSplit[0]).X1, GetTPABounds(NetClSplit[0]).Y1, GetTPABounds(NetClSplit[0]).X2, GetTPABounds(NetClSplit[0]).Y2)], clRed); // Box of the net
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(NetClSplit[0]).X1, GetTPABounds(NetClSplit[0]).Y1, GetTPABounds(NetClSplit[0]).X2, GetTPABounds(NetClSplit[0]).Y2)], clPurple); // Box of the clickable part
        end;

      Mousebox(GetTPABounds(NetClSplit[0]).X1, GetTPABounds(NetClSplit[0]).Y1, GetTPABounds(NetClSplit[0]).X2, GetTPABounds(NetClSplit[0]).Y2, 2);
      if WaitUpTextMulti(['limb', 'over'], 500) then
        begin
          case Random(7) of
            0..4: ClickMouse2(1);
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['limb', 'over'], 500);
                  end;
          end;
       end;
       Wait(3000 + Random(1500));
       Result:=True;
    end;
end;

// Walking over the ledge \\
function LedgeCheck: String;
var
  i, t: Integer;
  PossibleText: Array of String;

begin
  MarkTime(t);
  repeat
    Wait(50 + Random(50));
  until (FindChatBoxText('skil', 8, clBlack)) or (FindChatBoxText('slip', 8, clBlack)) or (TimeFromMark(t)>1500);
  if TimeFromMark(t) < 3000 then
    begin
      PossibleText := ['skil', 'slip'];
      for i:=0 to 1 do
        begin
          if FindChatBoxText(PossibleText[i], 8, clBlack) then
            Result := PossibleText[i];
        end;
    end else
      Result:='time';
end;

function LedgeFail: Boolean;
var
  X, Y: Integer;
  NetCl: TPointArray;
  NetClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.10, 0.58);
  if FindColorsSpiralTolerance(X, Y, NetCl, 5204079, MSX1, MSY1, MSX2, MSY2, 7) then
    begin
      SplitTPAExWrap(NetCl, 3, 3, NetClSplit);
      SortATPASize(NetClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(NetClSplit);
          SMART_DrawDotsEx(False, NetCl, clYellow); // Net
          SMART_DrawBoxes(False, [GetTPABounds(NetCl)], clAqua); // TPA Box
          SMART_DrawCircle(False, MiddleTPA(NetClSplit[0]), 2, True, clRed); // Middle net
        end;

      MiddleTPAEx(NetClSplit[0], X, Y);
      MMouse(X+25, Y, RandomRange(-5, 5), RandomRange(-40, 40));
      ClickMouse2(1);
      FFlag(0);
      Wait(500 + Random(500));
      Result:=True;
    end;
end;

function WalkLedge: Boolean;
var
  X, Y: Integer;
  LedgeCl: TPointArray;
  LedgeClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.15, 0.49);
  if FindColorsSpiralTolerance(X, Y, LedgeCl, 1587529, MSCX-200, MSCY-60, MSCX, MSCY, 10) then
    begin
      SplitTPAExWrap(LedgeCl, 1, 1, LedgeClSplit);
      SortATPASize(LedgeClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(LedgeClSplit);
          SMART_DrawBoxes(False, [IntToBox(MSCX-200, MSCY-60, MSCX, MSCY)], clWhite);  // Search area
          SMART_DrawDotsEx(False, LedgeCl, clYellow); // Log
          SMART_DrawBoxes(False, [GetTPABounds(LedgeCl)], clAqua); // TPA Box
          SMART_DrawCircle(False, MiddleTPA(LedgeClSplit[0]), 2, True, clRed); // Middle net
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(LedgeClSplit[0]).X2 - 25, GetTPABounds(LedgeClSplit[0]).Y1 + 2, GetTPABounds(LedgeClSplit[0]).X2 - 2, GetTPABounds(LedgeClSplit[0]).Y1 + 15)], clRed); // Box of the net
        end;

      MouseBox(GetTPABounds(LedgeClSplit[0]).X2 - 25, GetTPABounds(LedgeClSplit[0]).Y1 + 2, GetTPABounds(LedgeClSplit[0]).X2 - 2, GetTPABounds(LedgeClSplit[0]).Y1 + 15, 2);
      if WaitUpTextMulti(['alk', 'cross'], 500) then
        begin
          case Random(7) of
            0..4: ClickMouse2(1);
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['alk', 'cross'], 500);
                  end;
          end;
       end;
      Wait(3000 + Random(1500));
        case LedgeCheck of
          'skil': begin
                    Wait(1000 + Random(1000));
                    Result:=True;
                  end;
          'slip': begin
                    Wait(2500 + Random(1000));
                    if LedgeFail then
                      begin
                        ClimbNet;
                        WalkLedge;
                      end;
                  end;
          'time': WalkLedge;
        end;
    end;
end;

// Climbing the ladder \\
function LadderClimb: Boolean;
var
  X, Y, i, Y2: Integer;
  X1, Y1, X2: Array[0..1] of Integer;
  LadderCl: TPointArray;
  LadderClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.14, 0.74);
  if FindColorsSpiralTolerance(X, Y, LadderCl, 1520451, MSCX-25, MSCY, MSCX+25, MSCY+50, 7) then
    begin
      SplitTPAExWrap(LadderCl, 3, 3, LadderClSplit);
      SortATPASize(LadderClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(LadderClSplit);
          SMART_DrawBoxes(False, [IntToBox(MSCX-25, MSCY, MSCX+25, MSCY+50)], clWhite); // Search area
          SMART_DrawDotsEx(False, LadderCl, clYellow); // Ladder
          SMART_DrawBoxes(False, [GetTPABounds(LadderCl)], clAqua); // TPA Box
          SMART_DrawCircle(False, MiddleTPA(LadderClSplit[0]), 2, True, clRed); // Middle net
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(LadderClSplit[0]).X1, GetTPABounds(LadderClSplit[0]).Y1, GetTPABounds(LadderClSplit[0]).X2, GetTPABounds(LadderClSplit[0]).Y2)], clRed); // Box of the Ladder
        end;

      for i:=0 to 1 do
        begin
          X1[i] := GetTPABounds(LadderClSplit[i]).X1;
          Y1[i] := GetTPABounds(LadderClSplit[i]).Y1;
          X2[i] := GetTPABounds(LadderClSplit[i]).X2;
          SortTPAByY(LadderCl, False);
          Y2 := LadderCl[i].Y-5;
          SortATPASize(LadderClSplit, True);
        end;

      if Debug then
        begin
          SMART_DrawBoxes(False, [IntToBox(X1[0]+1, Y1[0]+1, X2[0]-1, Y2-1)], clPurple); // Left ladder part
          SMART_DrawBoxes(False, [IntToBox(X1[1]+1, Y1[1]+1, X2[1]-1, Y2-1)], clPurple); // Right ladder part
          SMART_DrawBoxes(False, [IntToBox(X1[0]+5, Y1[0]+10, X2[1]-5, GetTPABounds(LadderClSplit[1]).Y2+6)], clGreen); // Ladder middle box
        end;

      case Random(4) of
        0: Mousebox(X1[0]+1, Y1[0]+1, X2[0]-1, Y2-1, 2); // Left ladder part
        1: Mousebox(X1[1]+1, Y1[1]+1, X2[1]-1, Y2-1, 2); // Right ladder part
        2..3: Mousebox(X1[0]+5, Y1[0]+4, X2[1]-5, GetTPABounds(LadderClSplit[1]).Y2+4, 2); // Ladder middle box
      end;

      if WaitUpTextMulti(['limb', 'own'], 500) then
        begin
          case Random(7) of
            0..4: begin
                    ClickMouse2(1);
                    Result:=True;
                  end;
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['limb', 'own'], 500);
                    Result:=True;
                  end;
          end;
         Wait(1500 + Random(1000));
       end;
    end;
end;

// Climbing wall #1 \\
function ClimbCheck: String;
var
  t: Integer;

begin
  MarkTime(t);
  repeat
    Wait(50 + Random(50));
  until (FindChatBoxText('low wall', 8, clBlack)) or (TimeFromMark(t)>1500);
  if TimeFromMark(t) < 2000 then
    begin
      Result := 'climbed';
    end else
    begin
      Result:='time';
    end;
end;

function ClimbWallI: Boolean;
var
  X, Y, P: Integer;
  WallCl: TPointArray;
  WallClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.15, 0.16);
  if FindColorsSpiralTolerance(X, Y, WallCl, 6317675, MSX1, MSY1, MSX2, MSY2, 24) then
    begin
      SplitTPAExWrap(WallCl, 1, 1, WallClSplit);
      SortATPASize(WallClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(WallClSplit);
          SMART_DrawDotsEx(False, WallCl, clYellow); // Wall
          SMART_DrawBoxes(False, [GetTPABounds(WallCl)], clAqua); // TPA Box
          SMART_DrawBoxes(False, [IntToBox(GetTPABounds(WallClSplit[1]).X1, GetTPABounds(WallClSplit[1]).Y1, GetTPABounds(WallClSplit[1]).X2, GetTPABounds(WallClSplit[1]).Y2)], clGreen); // TPA Box of clickable wall
        end;

      P := RandomRange(Low(WallClSplit[1]), High(WallClSplit[1]));
      MMouse(WallClSplit[1][P].X, WallClSplit[1][P].Y, 0, 0); // Random spot on rope 1
      if WaitUpTextMulti(['limb', 'own'], 500) then
        begin
          case Random(7) of
            0..4: begin
                    ClickMouse2(1);
                    Result:=True;
                  end;
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['limb', 'own'], 500);
                    Result:=True;
                  end;
          end;
          Wait(4000 + Random(2000));
          case ClimbCheck of
            'climbed': Result:=True;
            'time': ClimbWallI;
          end;
        end;
    end;
end;

// Climbing wall #2 \\
function ClimbWallII: Boolean;
var
  X, Y: Integer;
  WallCl: TPointArray;
  WallClSplit: Array of TPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorspeed2Modifiers(0.15, 0.16);
  if FindColorsSpiralTolerance(X, Y, WallCl, 6317675, MSX1, MSY1, MSX2, MSY2, 24) then
    begin
      SplitTPAExWrap(WallCl, 1, 1, WallClSplit);
      SortATPASize(WallClSplit, True);

      if Debug then
        begin
          SMART_ClearCanvas;
          DebugATPABounds(WallClSplit);
          SMART_DrawDotsEx(False, WallCl, clYellow); // Wall
          SMART_DrawBoxes(False, [GetTPABounds(WallCl)], clAqua); // TPA Box
        end;

      MiddleTPAEx(WallClSplit[0], X, Y);

      if Debug then
        begin
          SMART_DrawBoxes(False, [IntToBox(X+44, Y-6, X+54, Y+20)], clPurple); // TPA Box
        end;

      Mousebox(X+44, Y-6, X+54, Y+20, 2);
      if WaitUpTextMulti(['limb', 'own'], 500) then
        begin
          case Random(7) of
            0..4: begin
                    ClickMouse2(1);
                    Result:=True;
                  end;
            5..6: begin
                    ClickMouse2(0);
                    WaitOptionMulti(['limb', 'own'], 500);
                    Result:=True;
                  end;
          end;
          Wait(3000 + Random(1500));
          case ClimbCheck of
            'climbed': begin
                         Wait(1000 + Random(1000));
                         Result:=True;
                       end;
            'time': ClimbWallI;
          end;
        end;
    end;
end;

procedure Mainloop;
var
  X, Y, NpcDTM, i: Integer;
  Rope, Log, Net, Ladder, Wall: TBox;
  Positions: Array of TBox;
  Position: TPoint;
  aFound: Extended;

begin
  // RopeSwing | LogWalk | ClimbNet+Walkledge+Ladderclimb | ladder | climbwallI+climbwallII
  Rope := IntToBox(584, 95, 608, 107);
  Log := IntToBox(586, 52, 616, 79);
  Net := IntToBox(628, 51, 656, 74);
  Ladder := IntToBox(665, 53, 686, 74);
  Wall := IntToBox(650, 82, 667, 107);
  Positions := [Rope, Log, Net, Ladder, Wall];

  //NpcDtm := DTMFromString('mQwAAAHicY2ZgYNjExsCwG4gPALE3EwNDBBB7AfH/r4IMrb2zGKL0ORmUgeokoZgRCQMBAFG5B9E=');
  NpcDtm := DTMFromString('mQwAAAHicY2ZgYNjMxsCwC4j3A7EFEwODExCbAfH/r4IMHV3TGWJ12Bg0gOokoRgoxcAIxUAAAEY5B5M=');
  if FindDTMRotated(NpcDTM, X, Y, MMX1, MMY1, MMX2, MMY2, -pi/16, pi/16, pi/64, aFound) then
    begin
      Position := Point(X, Y);
      WriteLn('Position: '+IntToStr(Position.X)+', '+IntToStr(Position.Y)+'');

      if Debug then
        begin
          SMART_ClearCanvas;
          SMART_DrawBoxes(False, [IntToBox(X-2, Y-2, X+2, Y+2)], clRed);
          SMART_DrawLine(False, Point(MMCX, MMCY), Position, clRed);
        end;

      for i:=0 to 4 do
        begin
          if PointInBox(Position, Positions[i]) then
            begin
              Attempts := 0;
              case i of
                0: begin
                     WriteLn('Near the rope swing');
                     RopeSwing;
                   end;
                1: begin
                     WriteLn('Near log');
                     LogWalk;
                   end;
                2: begin
                     WriteLn('Near the net');
                     ClimbNet;
                     WalkLedge;
                     LadderClimb;
                   end;
                3: begin
                     WriteLn('Near ladder');
                     MouseBox(644, 50, 652, 60, 1);
                     FFlag(0);
                     Wait(500 + Random(500));
                   end;
                4: begin
                     WriteLn('Near wall');
                     ClimbWallI;
                     ClimbWallII;
                     MouseBox(655, 78, 670, 86, 1);
                     FFlag(0);
                     Wait(500 + Random(500));
                   end;
              end;
              Break;
            end else
            begin
              Inc(Attempts);
              if (Attempts > 8) then
                begin
                  if not(FindNormalRandoms) then
                    begin
                      WriteLn('We are not in a random event');
                      WriteLn('We are at an unknown position, terminating script to be safe');
                      Wait(3000 + Random(3000));
                      LogOut;
                      TerminateScript;
                    end;
                end;
            end;
       end;
    end else
    begin
      WriteLn('Didn''t find the DTM');
    end;
  FreeDTM(NpcDTM);
end;

begin
  SetUpLogin;
  Debug := False;
  repeat
    Mainloop;
  until(false);
end.
