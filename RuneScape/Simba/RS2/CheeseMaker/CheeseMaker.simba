program JJsCheeseMaker;
{$DEFINE SMART}
{$i srl/srl.simba}
{$i srl/srl/misc/paintsmart.simba}

var
  Debug: Boolean;
  CheeseWheels: Integer;

procedure DeclarePlayers;
begin
  HowManyPlayers := 1;
  NumberOfPlayers(HowManyPlayers);
  CurrentPlayer := 0;

  with Players[0] do
    begin
      Name := '';
      Pass := '';
      Pin := '';
      Active := True;
    end;
end;

procedure SetupLogin;
begin
  ClearDebug;
  Smart_Server := 10;
  Smart_Members := False;
  Smart_Signed := True;
  Smart_SuperDetail := False;
  SetupSRL;
  DeclarePlayers;
  LoginPlayer;
  ClickNorth(0);
  Wait(2000 + Random(500));
end;

function ObjFinder(Hue, Sat: Extended; Color, Tolerance, X1, Y1, X2, Y2: Integer; Width, Height:Integer; Sort: Boolean; Uptext: Array of String; xOffset, yOffset, UptextWaitTime: Integer): Boolean;
var
  X, Y, i: Integer;
  ColorTPA: TPointArray;
  ColorATPA: T2DPointArray;

begin
  ColorToleranceSpeed(2);
  SetColorSpeed2Modifiers(Hue, Sat);
  if FindColorsTolerance(ColorTPA, Color, X1, Y1, X2, Y2, Tolerance) then
    begin
      SplitTPAExWrap(ColorTPA, Width, Height, ColorATPA);
      if Debug then
        begin
          SMART_ClearCanvas;
          WriteLn('Counted colors: '+IntToStr(CountColorTolerance(Color, X1, Y1, X2, Y2, Tolerance))+'');
          WriteLn('TPA Length: '+IntToStr(Length(ColorTPA))+'');
          SMART_DrawDotsEx(False, ColorTPA, clYellow);
          SMART_DrawBoxes(False, [GetTPABounds(ColorTPA)], clPurple);
          for i:=0 to High(ColorATPA) do
            SMART_DrawBoxes(False, [GetTPABounds(ColorATPA[i])], clAqua);
        end;
      SortATPASize(ColorATPA, Sort);
      for i:=0 to High(ColorATPA) do
        begin
          MiddleTPAEx(ColorATPA[i], X, Y);
          MMouse(X, Y, xOffset, yOffset);
          if WaitUpTextMulti(Uptext, UptextWaitTime) then
            begin
              Result := True;
              Break;
            end;
        end;
    end;
end;

function ClimbStairs(Which: String): Boolean;
begin
  if ObjFinder(0.22, 0.79, 9412775, 1, MSX1, MSY1, MSX2, MSY2, 2, 2, True, ['limb', 'up', 'Climb'], RandomRange(-2, 2), RandomRange(-2, 2), 500) then
    begin
      case Which of
        'Up':   begin
                  case Random(7) of
                    0..4: ClickMouse2(1);
                    5..6: begin
                            ClickMouse2(0);
                            WaitOptionMulti(['limb', 'up'], 500);
                          end;
                  end;
                end;
        'Down': begin
                  ClickMouse2(0);
                  WaitOptionMulti(['down', 'own'], 500);
                end;
      end;
      FFlag(1);
      repeat
        Wait(50 + Random(50));
      until not(IsMoving);
      Wait(500 + Random(500));
      Result := True;
    end;
end;

function Cheese: Boolean;
var
  CheeseWheel, X, Y: Integer;

begin
  CheeseWheel := DTMFromString('mlwAAAHicY2dgYJjLysCwAIj7gXgeEK8F4uVAPAWIW5kZGKqBuA2IJ0DpPiCuA+KN7WZA3UxY8X8G3IARD4YCALHzCro=');
  if FindDTM(CheeseWheel, X, Y, MCX1, MCY1, MCX2, MCY2) then
    Result := True;
  FreeDTM(CheeseWheel);
end;

procedure Churn;
var
  Milk, t, X, Y: Integer;

begin
  if ObjFinder(0.35, 0.11, 9145490, 7, MSCX, MSY1, MSX2, MSY2, 2, 2, True, ['hurn', 'urn', 'Churn'], RandomRange(-2, 2), RandomRange(-2, 2), 500) then
    begin
      case Random(7) of
        0..4: ClickMouse2(1);
        5..6: begin
                ClickMouse2(0);
                WaitOptionMulti(['hurn', 'urn', 'Churn'], 500);
              end;
      end;
      FFlag(1);
      repeat
        Wait(50 + Random(50));
      until not(IsMoving);

      if WaitFunc(@Cheese, RandomRange(50, 100), 3000) then
        Mousebox(302, 404, 346, 455, 1);

      if not(GetCurrentTab = Tab_Inv) then FTAB(Tab_Inv);

      Milk := DTMFromString('mggAAAHicY2NgYPjCxsDwGoi/AvF/IP4MxP+AeDEzBK8H4jlAPAmIVwBxRogeUBcTBv7PgB0w4sAQAACTMAvF');
      MarkTime(t);
      repeat
        Wait(500 + Random(500));
      until (not(FindDTM(Milk, X, Y, MIX1, MIY1, MIX2, MIY2))) or (TimeFromMark(t) > 210000);
      IncEx(CheeseWheels, 28);
      FreeDTM(Milk);
    end;
end;

procedure OpenDoor(Which: String);
var
  SearchBox: TBox;

begin
  case Which of
    'Bank':   SearchBox := IntToBox(MSX1, MSY1, MSCX, MSCY);
    'Stairs': SearchBox := IntToBox(MSCX-75, MSY1, MSCX+75, MSCY);
  end;

  if ObjFinder(0.10, 0.15, 5201511, 3, SearchBox.X1, SearchBox.Y1, SearchBox.X2, SearchBox.Y2, 2, 2, True, ['pen', 'Open'], RandomRange(-2, 2), RandomRange(-2, 2), 500) then
    begin
      case Random(7) of
        0..4: ClickMouse2(1);
        5..6: begin
                ClickMouse2(0);
                WaitOptionMulti(['pen', 'Open'], 500);
              end;
      end;
      FFlag(1);
      repeat
        Wait(50 + Random(50));
      until not(IsMoving);
      Wait(500 + Random(500));
    end;
end;

procedure Banking;
begin
  FindNormalRandoms;
  if ObjFinder(0.08, 0.75, 6063786, 4, MSX1, MSY1, MSX2, MSY2, 2, 2, True, ['ank', 'Bank'], RandomRange(-2, 2), RandomRange(-2, 2), 500) then
    begin
      case Random(7) of
        0..4: ClickMouse2(1);
        5..6: begin
                ClickMouse2(0);
                WaitOptionMulti(['ank', 'Bank'], 500);
              end;
      end;
      FFlag(1);
      repeat
        Wait(50 + Random(50));
      until not(IsMoving);
      Wait(500 + Random(500));
    end;

  if WaitFunc(@BankScreen, RandomRange(50, 100), 3000) then
    begin
      MouseBox(357, 300, 382, 315, 1);
      Wait(300 + Random(300));
      Withdraw(0, 0, 28);
      Wait(300 + Random(300));
      CloseBank;
      Wait(1000 + Random(1000));
    end;
end;

procedure Proggy;
begin
  WriteLn('=============== JJ''s Cheese Maker ==============');
  WriteLn('Running for: '+MsToTime(GetTimeRunning, Time_Formal)+'');
  WriteLn('Made '+IntToStr(CheeseWheels)+' Cheese wheels');
  WriteLn('=================================================');
end;

begin
  SetUpLogin;
  Debug := True;
  repeat
    //Banking;
    //OpenDoor('Bank');
    ClimbStairs('Up');
    Churn;
    ClimbStairs('Down');
    OpenDoor('Bank');
    Proggy;
   until not(LoggedIn);
end.
